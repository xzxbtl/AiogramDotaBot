from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogramproject.main import bot
from aiogramproject.base.TakeInfoBase import TakeInfo
from aiogramproject.logs import logger


def register_handlers(dp):
    @dp.callback_query(lambda query: query.data == 'status_jobs')
    async def send_menu_dota(query: CallbackQuery):
        user_id = query.from_user.id
        try:
            await query.answer("–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –°—Ç–∞—Ç—É—Å –†–∞–±–æ—Ç üìä")
            job_name, status_job, take_award = await TakeInfo.take_status_job(user_id)
            builder = InlineKeyboardBuilder()
            but1 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_from_jobs_menu")
            if job_name == "Destroy Tower":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_destroy_tower")
                builder.row(but1, but2)
            elif job_name == "Attack Support":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_attack_support")
                builder.row(but1, but2)
            elif job_name == "Call Fight":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_call_fight")
                builder.row(but1, but2)
            elif job_name == "Destroy Ward":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_destroy_ward")
                builder.row(but1, but2)
            elif job_name == "Exit Line":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_exit_line")
                builder.row(but1, but2)
            elif job_name == "Farming Jungle":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_jungle")
                builder.row(but1, but2)
            elif job_name == "Kill Carry":
                but2 = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å ‚úîÔ∏è", callback_data="take_award_from_kill_carry")
                builder.row(but1, but2)
            else:
                builder.row(but1)
            await bot.edit_message_text(message_id=query.message.message_id,
                                        chat_id=query.message.chat.id,
                                        text=f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –ø–æ *–≤–∞—à–∏–º —Ä–∞–±–æ—Ç–∞–º* \n \n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –∑–∞–Ω—è—Ç—ã "
                                             f"*—Ä–∞–±–æ—Ç–æ–π*: " \
                                             f"`{ '–†–∞–±–æ—Ç—ã –Ω–µ—Ç' if job_name is None else job_name}` \n \n"
                                             f"–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "
                                             f"*–ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–∞–±–æ—Ç—ã* \n \n"
                                             f"–ó–¥–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å *–Ω–∞–≥—Ä–∞–¥—É* –∑–∞ —Ä–∞–±–æ—Ç—É!",
                                        parse_mode=ParseMode.MARKDOWN,
                                        reply_markup=builder.as_markup())

        except Exception as err:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {err}")
