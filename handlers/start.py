from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Dispatcher, types
from aiogram.enums import ParseMode
from aiogram import Bot

from aiogramproject.handlers.bonus.clicker import keyboard
from aiogramproject.logs import logger
from aiogramproject.base.main.core import async_engine
from aiogramproject.base.models import users_table
from aiogramproject.env.config_reader import config
from aiogramproject.base.TakeInfoBase import TakeInfo

bot = Bot(token=config.bot_token.get_secret_value())


def register_handlers(dp: Dispatcher):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        user_id = message.from_user.id
        async with async_engine.connect() as conn:
            query = users_table.select().where(users_table.c.user_id == user_id)
            result = await conn.execute(query)
            row = result.fetchone()
        if row is not None:
            await MainMenu.main_menu_letter(message)
            await bot.send_message(chat_id=message.chat.id,
                                   text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–æ—Ç–∞",
                                   reply_markup=keyboard)
        else:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ",
                callback_data="message_second",
            )
            )
            reply_message = await message.answer(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å",
                reply_markup=builder.as_markup(),
            )
            dp['initial_message_id'] = reply_message.message_id

    @dp.callback_query(lambda query: query.data == 'message_second')
    async def process_age_selection(callback: types.CallbackQuery):
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="üë∂üèª 6-10", callback_data="age_6_10"),
            types.InlineKeyboardButton(text="üë¶üèª 10-14", callback_data="age_10_14"),
            types.InlineKeyboardButton(text="üë®‚Äçüéì 14-18", callback_data="age_14_18"),
            types.InlineKeyboardButton(text="üë®üèª‚Äçüíº 18+", callback_data="age_18_plus")
        )

        await bot.edit_message_text(chat_id=callback.message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
                                    reply_markup=builder.as_markup(), message_id=dp['initial_message_id'])

    @dp.callback_query(lambda query: query.data.startswith('age_'))
    async def process_selected_age(callback: types.CallbackQuery):
        age_mapping = {
            "age_6_10": "–î–µ—Ç–∏ 6-10 –ª–µ—Ç",
            "age_10_14": "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 10-14 –ª–µ—Ç",
            "age_14_18": "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 14-18 –ª–µ—Ç",
            "age_18_plus": "–í–∑—Ä–æ—Å–ª—ã–µ 18+ –ª–µ—Ç"
        }
        age_key = callback.data
        age_description = age_mapping.get(age_key)
        if age_description:
            # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            status = "Herald"
            balance = 0
            user_id = callback.from_user.id
            username = callback.from_user.username
            if username is not None:
                username = callback.from_user.username
            else:
                username = user_id
            async with async_engine.connect() as conn:
                stmt = users_table.insert().values(
                    username=username,
                    user_id=user_id,
                    age=age_description,
                    Confirmed=True,
                    Status=status,
                    Balance=balance
                )
                await conn.execute(stmt)
                await conn.commit()

            await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {age_description}")
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=dp['initial_message_id'])
            await MainMenu.main_menu(callback)
        else:
            logger.error(f"start.py - –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞")

    @dp.callback_query(lambda query: query.data == 'Menu')
    async def handle_main_menu_callback(query: types.CallbackQuery):
        await query.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=False)

        try:
            await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        except Exception as err:
            logger.info(f"start.py - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}")

        await MainMenu.main_menu(query)


class MainMenu:
    @staticmethod
    async def main_menu(callback: types.CallbackQuery):
        builder = InlineKeyboardBuilder()
        but_first = types.InlineKeyboardButton(text="‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Menu")
        but_second = types.InlineKeyboardButton(text="üéÆ Dota 2", callback_data="Dota2")
        but_third = types.InlineKeyboardButton(text="üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="Job")
        but_four = types.InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="Bonus")
        but_five = types.InlineKeyboardButton(text='üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
        but_six = types.InlineKeyboardButton(text="üìã –ò–Ω—Ñ–æ", callback_data="Info")
        but_seven = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí™", callback_data="support_project")
        builder.add(but_first)
        builder.row(but_second, but_third, width=2)
        builder.row(but_four, but_five, but_seven, width=2)
        builder.row(but_six)

        user_id = callback.from_user.id
        status, balance, username, confirmed = await TakeInfo.take_all_info_about_user(user_id)
        await TakeInfo.user_cache_info_profile(user_id)
        hidden_id = await TakeInfo.take_hidden_id(callback)
        if hidden_id is True:
            user_id = '*********'

        emoji = await TakeInfo.take_hidden_new_value(callback)
        if emoji is None:
            emoji = "üíé"

        return await bot.send_message(chat_id=callback.message.chat.id,
                                      text=f" üìï *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* `{username}` \n "
                                           f"–í–∞—à ID: `{user_id}` \n "
                                           f"–í–∞—à —Å—Ç–∞—Ç—É—Å: `{status}` \n "
                                           f"–í–∞—à –ë–∞–ª–∞–Ω—Å: `{balance}` {emoji}",
                                      reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN)

    @staticmethod
    async def main_menu_letter(message: types.Message):
        builder = InlineKeyboardBuilder()
        but_first = types.InlineKeyboardButton(text="‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Menu")
        but_second = types.InlineKeyboardButton(text="üéÆ Dota 2", callback_data="Dota2")
        but_third = types.InlineKeyboardButton(text="üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="Job")
        but_four = types.InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="Bonus")
        but_five = types.InlineKeyboardButton(text='üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
        but_six = types.InlineKeyboardButton(text="üìã –ò–Ω—Ñ–æ", callback_data="Info")
        but_seven = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üí™", callback_data="support_project")
        builder.add(but_first)
        builder.row(but_second, but_third, width=2)
        builder.row(but_four, but_five, but_seven, width=2)
        builder.row(but_six)

        user_id = message.from_user.id
        status, balance, username, confirmed = await TakeInfo.take_all_info_about_user(user_id)
        await TakeInfo.user_cache_info_profile(user_id)
        hidden_id = await TakeInfo.take_hidden_id(message)
        if hidden_id is True:
            user_id = '*********'

        emoji = await TakeInfo.take_hidden_new_value(message)

        if emoji is None:
            emoji = "üíé"

        return await bot.send_message(chat_id=message.chat.id,
                                      text=f" üìï *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* `{username}` \n "
                                           f"–í–∞—à ID: `{user_id}` \n "
                                           f"–í–∞—à —Å—Ç–∞—Ç—É—Å: `{status}` \n "
                                           f"–í–∞—à –ë–∞–ª–∞–Ω—Å: `{balance}` {emoji}",
                                      reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN)
